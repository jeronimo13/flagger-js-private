{"version":3,"file":"flagger.js","sources":["src/logger.js","src/object.js","src/population.js","src/stat.js","src/flag.js","src/environment.js","src/lru.js","src/router.js","src/airship.js","src/validators/core_validator.js","src/transformers/core_transformer.js","src/core.js","src/index.js","src/index-umd.js"],"sourcesContent":["export let logger = x => {\n  // eslint-disable-next-line no-console\n  console.error(x)\n}\n\nexport function setLogger(fn) {\n  logger = fn\n}\n","// import Ajv from 'ajv'\n// import ajvErrors from 'ajv-errors'\nimport md5 from 'md5'\nimport {logger} from './logger'\nimport stringify from 'fast-json-stable-stringify'\n\nconst SCHEMA = {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      pattern: '^([A-Z][a-zA-Z]*)+$',\n      maxLength: 50,\n      minLength: 1,\n      errorMessage: {\n        type:\n          'Entity type must be a string that starts with a capital letter like [C]ar or [U]ser',\n        maxLength:\n          'Entity type must be a non-empty string of 50 characters or less',\n        minLength:\n          'Entity type must be a non-empty string of 50 characters or less'\n      }\n    },\n    isGroup: {\n      type: 'boolean',\n      errorMessage: {\n        type: '`isGroup` must be a boolean'\n      }\n    },\n    id: {\n      type: ['string', 'integer'],\n      pattern: '^[ -~]+$',\n      maxLength: 250,\n      minLength: 1,\n      errorMessage: {\n        type:\n          \"An entity's `id` must be a string or integer. An integer `id` will be cast into a string.\",\n        maxLength:\n          \"An entity's `id` must be a non-empty string of 250 characters or less.\",\n        minLength:\n          \"An entity's `id` must be a non-empty string of 250 characters or less.\"\n      }\n    },\n    displayName: {\n      type: 'string',\n      maxLength: 250,\n      minLength: 1,\n      errorMessage: {\n        type: \"An entity's `displayName` must be a string\",\n        maxLength:\n          \"An entity's `displayName` must be a non-empty string of 250 characters or less.\",\n        minLength:\n          \"An entity's `displayName` must be a non-empty string of 250 characters or less.\"\n      }\n    },\n    attributes: {\n      type: 'object',\n      patternProperties: {\n        '^[a-zA-Z]$|^[a-zA-Z_]{0,48}[a-zA-Z]$': {\n          oneOf: [\n            {\n              type: 'string',\n              maxLength: 3000,\n              errorMessage: {\n                type:\n                  \"An entity's attribute value must be a string, boolean, or number.\",\n                maxLength:\n                  \"An entity's string attribute must be 3000 characters or less.\"\n              }\n            },\n            {\n              type: 'boolean',\n              errorMessage: {\n                type:\n                  \"An entity's attribute value must be a string, boolean, or number.\"\n              }\n            },\n            {\n              type: 'number',\n              errorMessage: {\n                type:\n                  \"An entity's attribute value must be a string, boolean, or number.\"\n              }\n            }\n          ],\n          errorMessage: {\n            oneOf:\n              \"An entity's attribute value must be a string, boolean, or number.\"\n          }\n        }\n      },\n      maxProperties: 100,\n      additionalProperties: false,\n      errorMessage: {\n        maxProperties: 'There can only be up to 100 attributes for an entity.',\n        additionalProperties:\n          'Each attribute must begin and end with an alphabet letter (a-z, A-Z). In between, allowed characters are a-z, A-Z, and \"_\". For example: isStudent or is_student. Preceding or trailing underscore is not allowed (i.e., _is_student or is_student_). Each attribute value must be a number, string or boolean.'\n      }\n    },\n    group: {\n      type: ['object', 'null'],\n      properties: {\n        type: {\n          type: 'string',\n          pattern: '^([A-Z][a-zA-Z]*)+$',\n          maxLength: 50,\n          minLength: 1,\n          errorMessage: {\n            type:\n              'Group type must be a string that starts with a capital letter like [C]arGroup or [U]serGroup. Camel casing is used to separate words.',\n            maxLength:\n              'Group type must be a non-empty string of 50 characters or less',\n            minLength:\n              'Group type must be a non-empty string of 50 characters or less'\n          }\n        },\n        isGroup: {\n          type: 'boolean',\n          enum: [true],\n          errorMessage: {\n            type: '`isGroup` must be a boolean',\n            enum: '`isGroup` must always be true for an group'\n          }\n        },\n        id: {\n          type: ['string', 'integer'],\n          pattern: '^[ -~]+$',\n          maxLength: 250,\n          minLength: 1,\n          errorMessage: {\n            type:\n              \"A group's `id` must be a string or integer. An integer `id` will be cast into a string.\",\n            maxLength:\n              \"A group's `id` must be a non-empty string of 250 characters or less.\",\n            minLength:\n              \"A group's `id` must be a non-empty string of 250 characters or less.\"\n          }\n        },\n        displayName: {\n          type: 'string',\n          maxLength: 250,\n          minLength: 1,\n          errorMessage: {\n            type: \"A group's `displayName` must be a string\",\n            maxLength:\n              \"A group's `displayName` must be a non-empty string of 250 characters or less.\",\n            minLength:\n              \"A group's `displayName` must be a non-empty string of 250 characters or less.\"\n          }\n        },\n        attributes: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z]$|^[a-zA-Z_]{0,48}[a-zA-Z]$': {\n              oneOf: [\n                {\n                  type: 'string',\n                  maxLength: 3000,\n                  errorMessage: {\n                    type:\n                      \"A group's attribute value must be a string, boolean, or number.\",\n                    maxLength:\n                      \"A group's string attribute must be 3000 characters or less.\"\n                  }\n                },\n                {\n                  type: 'boolean',\n                  errorMessage: {\n                    type:\n                      \"A group's attribute value must be a string, boolean, or number.\"\n                  }\n                },\n                {\n                  type: 'number',\n                  errorMessage: {\n                    type:\n                      \"A group's attribute value must be a string, boolean, or number.\"\n                  }\n                }\n              ],\n              errorMessage: {\n                oneOf:\n                  \"A group's attribute value must be a string, boolean, or number.\"\n              }\n            }\n          },\n          maxProperties: 100,\n          additionalProperties: false,\n          errorMessage: {\n            additionalProperties:\n              'Each attribute must begin and end with an alphabet letter (a-z, A-Z). In between, allowed characters are a-z, A-Z, and \"_\". For example: isStudent or is_student. Preceding or trailing underscore is not allowed (i.e., _is_student or is_student_). Each attribute value must be a number, string or boolean.'\n          }\n        }\n      },\n      required: ['id'],\n      additionalProperties: false,\n      errorMessage: {\n        required: 'Each group must have an `id` field.',\n        additionalProperties:\n          'Allowed properties for a group are: `type`, `id`, `displayName`, `attributes`, and `isGroup`. `id` is required, rest are optional.'\n      }\n    }\n  },\n  required: ['id'],\n  additionalProperties: false,\n  errorMessage: {\n    type: 'An entity is represented using a dictionary',\n    required: 'Each entity must have an `id` field.',\n    additionalProperties:\n      'Allowed properties for an entity are: `type`, `id`, `displayName`, `attributes`, `group`, and `isGroup`. `id` is required, rest are optional.'\n  }\n}\n\n// const ajv = Ajv({allErrors: true, jsonPointers: true})\n// ajvErrors(ajv)\nconst validate =() => {\n  return true\n}\n\nexport const DEFAULT_ENTITY_TYPE = 'User'\n\nexport default class AirshipObject {\n  constructor(obj) {\n    let isValid = AirshipObject.isValidObject(obj)\n\n    if (!isValid) {\n      this.object = null\n      return\n    }\n\n    obj = AirshipObject._cloneObject(obj)\n    isValid = AirshipObject._fillInFields(obj)\n\n    if (!isValid) {\n      this.object = null\n      return\n    }\n\n    this.object = obj\n  }\n\n  static isValidObject(obj) {\n    let isValid = validate(obj)\n    if (!isValid) {\n      logger(validate.errors.map(e => e.message))\n    }\n\n    if (isValid) {\n      const isGroup = obj.isGroup !== undefined ? obj.isGroup : false\n      const type = obj.type !== undefined ? obj.type : DEFAULT_ENTITY_TYPE\n\n      const groupIndex = type.lastIndexOf('Group')\n      if (\n        groupIndex !== -1 &&\n        groupIndex === type.length - 'Group'.length &&\n        !isGroup\n      ) {\n        logger(\n          \"An entity's type that ends with `Group` must be a group entity and therefore has to have an explicit `isGroup: true` property\"\n        )\n        isValid = false\n      }\n    }\n\n    return isValid\n  }\n\n  static _cloneObject(obj) {\n    const clone = Object.assign({}, obj)\n\n    if (obj.attributes !== undefined) {\n      clone.attributes = Object.assign({}, obj.attributes)\n    }\n\n    if (obj.group !== undefined) {\n      clone.group = Object.assign({}, obj.group)\n\n      if (obj.group.attributes !== undefined) {\n        clone.group.attributes = Object.assign({}, obj.group.attributes)\n      }\n    }\n\n    return clone\n  }\n\n  static _fillInFields(obj) {\n    if (obj.type === undefined) {\n      obj.type = DEFAULT_ENTITY_TYPE\n    }\n\n    if (obj.displayName === undefined) {\n      obj.displayName = '' + obj.id\n    }\n\n    if (obj.isGroup === undefined) {\n      obj.isGroup = false\n    }\n\n    if (Number.isInteger(obj.id)) {\n      const idStr = '' + obj.id\n      if (idStr.length > 250) {\n        logger('Integer id must have 250 digits or less')\n        return false\n      }\n      obj.id = idStr\n    }\n\n    let group = null\n    if (obj.group !== undefined) {\n      group = obj.group\n    }\n\n    if (group !== null && group.displayName === undefined) {\n      group.displayName = '' + group.id\n    }\n\n    if (group !== null && group.type === undefined) {\n      group.type = obj.type + 'Group'\n    }\n\n    if (group !== null) {\n      group.isGroup = true\n    }\n\n    if (group !== null) {\n      if (Number.isInteger(group.id)) {\n        const idStr = '' + group.id\n        if (idStr.length > 250) {\n          logger('Integer id must have 250 digits or less')\n          return false\n        }\n        group.id = idStr\n      }\n    }\n\n    return true\n  }\n\n  getHash() {\n    return md5(\n      stringify({\n        ...this.object,\n        attributes: this.object.attributes || {},\n        group: {\n          ...this.object.group,\n          attributes: (this.object.group && this.object.group.attributes) || {}\n        }\n      })\n    )\n  }\n\n  getId() {\n    const obj = this.object\n    return `${obj.type}_${obj.id}`\n  }\n\n  isValid() {\n    return this.object !== null\n  }\n\n  getRawObject() {\n    return this.object\n  }\n\n  getObject() {\n    const obj = this.object\n    const clone = Object.assign({}, obj)\n    delete clone.group\n    return new AirshipObject(clone)\n  }\n\n  getGroup() {\n    const group = this.object.group || null\n    return group && new AirshipObject(group)\n  }\n}\n","import md5 from 'md5'\nimport {logger} from './logger'\n\nexport const RULE_TYPE_STRING = 'string'\nexport const RULE_TYPE_INT = 'int'\nexport const RULE_TYPE_FLOAT = 'float'\nexport const RULE_TYPE_BOOLEAN = 'boolean'\nexport const RULE_TYPE_DATE = 'date'\nexport const RULE_TYPE_DATETIME = 'datetime'\n\nexport const RULE_OPERATOR_IS = 'is'\nexport const RULE_OPERATOR_IS_NOT = 'is_not'\nexport const RULE_OPERATOR_IN = 'in'\nexport const RULE_OPERATOR_NOT_IN = 'not_in'\nexport const RULE_OPERATOR_LT = 'lt'\nexport const RULE_OPERATOR_LTE = 'lte'\nexport const RULE_OPERATOR_GT = 'gt'\nexport const RULE_OPERATOR_GTE = 'gte'\nexport const RULE_OPERATOR_FROM = 'from'\nexport const RULE_OPERATOR_UNTIL = 'until'\nexport const RULE_OPERATOR_AFTER = 'after'\nexport const RULE_OPERATOR_BEFORE = 'before'\n\nexport const getHashedValue = s => {\n  return (parseInt(md5(s), 16) * 1.0) / 340282366920938463463374607431768211455\n}\n\nexport default class Population {\n  constructor(population) {\n    this.population = population\n  }\n\n  static categorizeValueType(v) {\n    if (v === true || v === false) {\n      return 'boolean'\n    } else if (typeof v === 'number') {\n      if ((v + '').indexOf('.') >= 0) {\n        return 'float'\n      } else {\n        return 'int'\n      }\n    } else if (typeof v === 'string') {\n      const unixTimestamp = new Date(v).getTime()\n\n      if (!isNaN(unixTimestamp)) {\n        const isoFormat = new Date(v).toISOString()\n        const timeIndex = isoFormat.lastIndexOf('T00:00:00.000Z')\n        if (\n          timeIndex !== -1 &&\n          isoFormat.length - 'T00:00:00.000Z'.length === timeIndex\n        ) {\n          return 'date'\n        } else {\n          return 'datetime'\n        }\n      }\n\n      return 'string'\n    }\n    logger('Unexpected attribute value type encountered')\n    return null\n  }\n\n  _ruleMatches(rule, obj) {\n    const attributes = obj.attributes || {}\n\n    if (!attributes.hasOwnProperty(rule.attributeName)) {\n      return false\n    }\n\n    const v = attributes[rule.attributeName]\n    const attributeType = Population.categorizeValueType(v)\n\n    const numberTypes = [RULE_TYPE_INT, RULE_TYPE_FLOAT]\n\n    if (\n      numberTypes.indexOf(attributeType) !== -1 &&\n      numberTypes.indexOf(rule.attributeType) !== -1\n    ) {\n      // This is fine\n    } else if (attributeType !== rule.attributeType) {\n      return false\n    }\n\n    const targetVal = rule.value\n    const targetValList = rule.valueList\n    const op = rule.operator\n\n    if (attributeType === RULE_TYPE_STRING) {\n      if (op === RULE_OPERATOR_IS) {\n        return v === targetVal\n      } else if (op === RULE_OPERATOR_IS_NOT) {\n        return v !== targetVal\n      } else if (op === RULE_OPERATOR_IN) {\n        return targetValList.indexOf(v) !== -1\n      } else if (op === RULE_OPERATOR_NOT_IN) {\n        return targetValList.indexOf(v) === -1\n      } else {\n        logger('Invalid rule operator encountered')\n        return false\n      }\n    } else if (numberTypes.indexOf(attributeType) !== -1) {\n      if (op === RULE_OPERATOR_IS) {\n        return v === targetVal\n      } else if (op === RULE_OPERATOR_IS_NOT) {\n        return v !== targetVal\n      } else if (op === RULE_OPERATOR_IN) {\n        return targetValList.indexOf(v) !== -1\n      } else if (op === RULE_OPERATOR_NOT_IN) {\n        return targetValList.indexOf(v) === -1\n      } else if (op === RULE_OPERATOR_LT) {\n        return v < targetVal\n      } else if (op === RULE_OPERATOR_LTE) {\n        return v <= targetVal\n      } else if (op === RULE_OPERATOR_GT) {\n        return v > targetVal\n      } else if (op === RULE_OPERATOR_GTE) {\n        return v >= targetVal\n      } else {\n        logger('Invalid rule operator encountered')\n        return false\n      }\n    } else if (attributeType === RULE_TYPE_BOOLEAN) {\n      if (op === RULE_OPERATOR_IS) {\n        return v === targetVal\n      } else if (op === RULE_OPERATOR_IS_NOT) {\n        return v !== targetVal\n      } else {\n        logger('Invalid rule operator encountered')\n        return false\n      }\n    } else if (\n      attributeType === RULE_TYPE_DATE ||\n      attributeType === RULE_TYPE_DATETIME\n    ) {\n      const targetTime = targetVal && new Date(targetVal).getTime()\n      const targetTimeList =\n        targetValList && targetValList.map(tv => new Date(tv).getTime())\n      const vTime = new Date(v).getTime()\n\n      if (op === RULE_OPERATOR_IS) {\n        return vTime === targetTime\n      } else if (op === RULE_OPERATOR_IS_NOT) {\n        return vTime !== targetTime\n      } else if (op === RULE_OPERATOR_IN) {\n        return targetTimeList.indexOf(vTime) !== -1\n      } else if (op === RULE_OPERATOR_NOT_IN) {\n        return targetTimeList.indexOf(vTime) === -1\n      } else if (op === RULE_OPERATOR_FROM) {\n        return vTime >= targetTime\n      } else if (op === RULE_OPERATOR_UNTIL) {\n        return vTime <= targetTime\n      } else if (op === RULE_OPERATOR_AFTER) {\n        return vTime > targetTime\n      } else if (op === RULE_OPERATOR_BEFORE) {\n        return vTime < targetTime\n      } else {\n        logger('Invalid rule operator encountered')\n        return false\n      }\n    } else {\n      logger('Invalid attribute type encountered')\n      return false\n    }\n  }\n\n  getGateValues(obj, env, flag, sticky) {\n    const population = this.population\n    if (this.population.entityType !== obj.type) {\n      return {eligible: false}\n    }\n\n    const rules = population.rules\n\n    let matches = true\n\n    for (let i = 0; i < rules.length; i++) {\n      const r = rules[i]\n      matches = matches && this._ruleMatches(r, obj)\n    }\n\n    if (matches) {\n      const samplingHashKey = `SAMPLING:control_${flag.hashKey}:env_${\n        env.hashKey\n      }:rule_set_${this.population.hashKey}:client_object_${obj.type}_${obj.id}`\n\n      const hashedPercentage = getHashedValue(samplingHashKey)\n\n      if (\n        hashedPercentage <= this.population.percentage &&\n        this.population.percentage > 0\n      ) {\n        const splits = sticky\n          ? this.population.universes[\n              Math.max(Math.floor(hashedPercentage * 100) - 1, 0)\n            ]\n          : flag.splits\n        const splitsMap = {}\n        for (let i = 0; i < splits.length; i++) {\n          const split = splits[i]\n          splitsMap[split.treatmentId] = split\n        }\n\n        const allocationHashKey = `DISTRIBUTION:control_${flag.hashKey}:env_${\n          env.hashKey\n        }:client_object_${obj.type}_${obj.id}`\n\n        const allocationHashedPercentage = getHashedValue(allocationHashKey)\n\n        let trailingSum = 0.0\n\n        const treatments = flag.treatments.filter(t => !t.isOffTreatment)\n\n        let treatment = null\n        for (let i = 0; i < treatments.length; i++) {\n          const t = treatments[i]\n          if (splitsMap.hasOwnProperty(t.treatmentId)) {\n            trailingSum = parseFloat(\n              (trailingSum + splitsMap[t.treatmentId].percentage).toFixed(3)\n            )\n\n            if (allocationHashedPercentage <= trailingSum) {\n              treatment = t\n              break\n            }\n          }\n        }\n\n        return {treatment: treatment, eligible: true}\n      } else {\n        return {eligible: true}\n      }\n    } else {\n      return {eligible: false}\n    }\n  }\n}\n","const NS_PER_SEC = 1e9\n\nexport default class Stat {\n  static compactStats(stats) {\n    const groups = stats.reduce((groups, stat) => {\n      const key = [stat.name, stat.type].join(',')\n      groups[key] = groups[key] || []\n      groups[key].push(stat)\n      return groups\n    }, {})\n\n    return Object.values(groups).map(stats => {\n      const newStat = new Stat(stats[0].name, stats[0].type)\n      let totalDuration, totalCount\n      switch (newStat.type) {\n        case Stat.TYPE_DURATION:\n          totalDuration = stats.reduce(\n            (duration, stat) => duration + stat.averageDuration * stat.count,\n            0\n          )\n          totalCount = stats.reduce((count, stat) => count + stat.count, 0)\n          newStat.setAverageDuration(totalDuration / totalCount)\n          newStat.setCount(totalCount)\n          break\n        case Stat.TYPE_COUNT:\n          newStat.setCount(stats.reduce((count, stat) => count + stat.count, 0))\n          break\n      }\n      return newStat\n    })\n  }\n\n  constructor(name, type) {\n    const allowedTypes = [Stat.TYPE_DURATION, Stat.TYPE_COUNT]\n    if (allowedTypes.indexOf(type) === -1) {\n      throw 'Invalid stat type passed'\n    }\n    this.name = name\n    this.type = type\n\n    this.count = 0\n    this.startTime = null\n\n    this.averageDuration = 0\n  }\n\n  start() {\n    // if (this.averageDuration !== 0) {\n    //   throw 'Duration already calculated'\n    // }\n\n    // if (this.startTime !== null) {\n    //   throw 'Stat start() already called'\n    // }\n\n    // this.startTime = process.hrtime()\n    return this\n  }\n\n  stop() {\n    // if (this.averageDuration !== 0) {\n    //   throw 'Duration already calculated'\n    // }\n\n    // if (this.startTime === null) {\n    //   throw 'Stat start() has not been called'\n    // }\n\n    // const stopTime = process.hrtime(this.startTime)\n    // this.averageDuration = stopTime[0] * NS_PER_SEC + stopTime[1]\n    // this.count = 1\n    return this\n  }\n\n  setCount(n) {\n    this.count = n\n    return this\n  }\n\n  setAverageDuration(t) {\n    this.averageDuration = t\n    return this\n  }\n\n  getDuration() {\n    return this.averageDuration\n  }\n\n  getStatsObj() {\n    const statsObj = {\n      name: this.name\n    }\n    if (this.type === Stat.TYPE_DURATION) {\n      if (this.averageDuration !== 0) {\n        statsObj.duration = this.averageDuration\n        statsObj.unit = 'ns'\n        statsObj.count = this.count\n        return statsObj\n      }\n    } else if (this.type === Stat.TYPE_COUNT) {\n      statsObj.count = this.count\n      return statsObj\n    }\n    return null\n  }\n}\n\nStat.TYPE_DURATION = 'stat_type__duration'\nStat.TYPE_COUNT = 'stat_type__count'\n","import {logger} from './logger'\n\nexport default class Flag {\n  constructor(flag, delegate) {\n    if (typeof flag === 'string') {\n      this._isWild = true\n      this.flagName = flag\n    } else {\n      // These along with flag.flagType and flag.flagStatus\n      // should always be present\n      this.hashKey = flag.hashKey\n      this.flag = flag\n      this.codename = flag.codename\n\n      // Pass through fields\n      this.isPaused = flag.isPaused\n      this.offTreatment = flag.offTreatment\n      this.treatments = flag.treatments\n      this.treatmentsMap = flag.treatmentsMap\n      this.overrides = flag.overrides\n      this.populations = flag.populations\n      this.splits = flag.splits\n    }\n    this.delegate = delegate\n  }\n\n  isUncategorized() {\n    return Boolean(this._isWild) || this.flag.flagType === 'uncategorized'\n  }\n\n  isWild() {\n    return Boolean(this._isWild)\n  }\n\n  isArchived() {\n    return this.flag.flagStatus === 'archived'\n  }\n\n  setDelegate(delegate) {\n    this.delegate = delegate\n  }\n\n  getType() {\n    if (this._isWild) {\n      logger(\n        `Encountered uncategorized flag \"${\n          this.flagName\n        }\". Visit Airship web app to convert it to a real flag`\n      )\n      return 'uncategorized'\n    }\n\n    const flagType = this.flag.flagType\n\n    switch (flagType) {\n      case 'basic':\n        return 'basic'\n      case 'experiment':\n        return 'experiment'\n      case 'uncategorized':\n        return 'uncategorized'\n      default:\n        logger('Unexpected flag type encountered')\n        return null\n    }\n  }\n\n  getTreatment(obj) {\n    if (!this.delegate) {\n      throw 'Delegate not provided to flag'\n    }\n    return this.delegate.getTreatment(this, obj)\n  }\n\n  getPayload(obj) {\n    if (!this.delegate) {\n      throw 'Delegate not provided to flag'\n    }\n    return this.delegate.getPayload(this, obj)\n  }\n\n  isEligible(obj) {\n    if (!this.delegate) {\n      throw 'Delegate not provided to flag'\n    }\n    return this.delegate.isEligible(this, obj)\n  }\n\n  isEnabled(obj) {\n    if (!this.delegate) {\n      throw 'Delegate not provided to flag'\n    }\n    return this.delegate.isEnabled(this, obj)\n  }\n}\n","import {logger} from './logger'\nimport AirshipObject from './object'\nimport Population from './population'\nimport Stat from './stat'\nimport Flag from './flag'\n\nexport default class Environment {\n  identify(obj) {\n    this.object = obj\n  }\n\n  async maybeIngest() {}\n\n  _identifyObject(obj) {\n    const airshipObj =\n      obj instanceof AirshipObject ? obj : new AirshipObject(obj)\n\n    return airshipObj\n  }\n\n  _saveStat() {}\n\n  _saveExposure() {}\n\n  async publish(objs) {} // eslint-disable-line no-unused-vars\n\n  shutdown() {}\n\n  flag(flagName) {\n    const flag = this.router\n      ? this.router.getFlag(flagName)\n      : new Flag(flagName)\n    flag.setDelegate(this)\n    return flag\n  }\n\n  _getAllocation(flag, airshipObj) {\n    const offTreatment = flag.offTreatment\n\n    if (flag.isArchived()) {\n      logger(`The flag \"${flag.codename}\" has been archived`)\n      return {\n        treatment: offTreatment,\n        eligible: false\n      }\n    }\n\n    if (flag.isPaused) {\n      return {\n        treatment: offTreatment,\n        eligible: false\n      }\n    }\n\n    // If the airshipObj is not a valid obj,\n    // then return the offTreatment/false\n    if (!airshipObj) {\n      return {\n        treatment: offTreatment,\n        eligible: false\n      }\n    }\n\n    const id = airshipObj.getId()\n    const override = flag.overrides[id]\n\n    if (override) {\n      const treatment = flag.treatmentsMap[override.treatmentId]\n      return {\n        treatment: treatment,\n        eligible: !treatment.isOffTreatment,\n        fromOverride: true\n      }\n    }\n\n    const obj = airshipObj.getRawObject()\n    const useUniverses = flag.getType() === 'experiment'\n    const populations = flag.populations\n    let treatment = null\n    let eligible = false\n\n    for (let i = 0; i < populations.length; i++) {\n      const p = new Population(populations[i])\n      const gateValues = p.getGateValues(\n        obj,\n        this.router.getEnv(),\n        flag,\n        useUniverses\n      )\n      eligible = eligible || gateValues.eligible\n      if (gateValues.treatment) {\n        treatment = gateValues.treatment\n        break\n      }\n    }\n\n    return {\n      treatment: treatment || offTreatment,\n      eligible: eligible\n    }\n  }\n\n  _resolveAllocations(alloc1, alloc2) {\n    if (alloc1.fromOverride) {\n      return alloc1\n    }\n\n    if (alloc2.fromOverride) {\n      return alloc2\n    }\n\n    if (!alloc1.treatment.isOffTreatment) {\n      return alloc1\n    }\n\n    if (!alloc2.treatment.isOffTreatment) {\n      return alloc2\n    }\n\n    return alloc1\n  }\n\n  _getExposure(flag, airshipObj, alloc, methodCalled) {\n    const obj = airshipObj.getRawObject()\n    return {\n      flag: flag.codename,\n      type: obj.type,\n      id: obj.id,\n      treatment: alloc.treatment.codename,\n      methodCalled: methodCalled,\n      eligible: alloc.eligible,\n      timeExposed: new Date().toISOString()\n    }\n  }\n\n  getTreatment(flag, obj) {\n    const stat = new Stat('duration__get_treatment', Stat.TYPE_DURATION)\n    stat.start()\n    obj = obj || this.object\n\n    const airshipObj = this._identifyObject(obj)\n    if (!airshipObj.isValid() || flag.isUncategorized()) {\n      return 'off'\n    }\n\n    const allocation = this._getAllocation(flag, airshipObj)\n    const groupAllocation = this._getAllocation(flag, airshipObj.getGroup())\n\n    const finalAllocation = this._resolveAllocations(\n      allocation,\n      groupAllocation\n    )\n\n    const expo = this._getExposure(\n      flag,\n      airshipObj,\n      finalAllocation,\n      'get_treatment'\n    )\n    this._saveExposure(expo)\n\n    stat.stop()\n    this._saveStat(stat)\n    return finalAllocation.treatment.isGhost\n      ? (flag.offTreatment && flag.offTreatment.codename) || 'off'\n      : finalAllocation.treatment.codename\n  }\n\n  getPayload(flag, obj) {\n    const stat = new Stat('duration__get_payload', Stat.TYPE_DURATION)\n    stat.start()\n    obj = obj || this.object\n    const airshipObj = this._identifyObject(obj)\n    if (!airshipObj.isValid() || flag.isUncategorized()) {\n      return null\n    }\n\n    const allocation = this._getAllocation(flag, airshipObj)\n    const groupAllocation = this._getAllocation(flag, airshipObj.getGroup())\n\n    const finalAllocation = this._resolveAllocations(\n      allocation,\n      groupAllocation\n    )\n\n    const expo = this._getExposure(\n      flag,\n      airshipObj,\n      finalAllocation,\n      'get_payload'\n    )\n    this._saveExposure(expo)\n\n    stat.stop()\n    this._saveStat(stat)\n    return finalAllocation.treatment.isGhost\n      ? (flag.offTreatment && flag.offTreatment.payload) || null\n      : finalAllocation.treatment.payload\n  }\n\n  isEligible(flag, obj) {\n    const stat = new Stat('duration__is_eligible', Stat.TYPE_DURATION)\n    stat.start()\n    obj = obj || this.object\n\n    const airshipObj = this._identifyObject(obj)\n    if (!airshipObj.isValid() || flag.isUncategorized()) {\n      return false\n    }\n\n    const allocation = this._getAllocation(flag, airshipObj)\n    const groupAllocation = this._getAllocation(flag, airshipObj.getGroup())\n\n    const finalAllocation = this._resolveAllocations(\n      allocation,\n      groupAllocation\n    )\n\n    const expo = this._getExposure(\n      flag,\n      airshipObj,\n      finalAllocation,\n      'is_eligible'\n    )\n    this._saveExposure(expo)\n\n    stat.stop()\n    this._saveStat(stat)\n    return finalAllocation.eligible\n  }\n\n  isEnabled(flag, obj) {\n    const stat = new Stat('duration__is_enabled', Stat.TYPE_DURATION)\n    stat.start()\n    obj = obj || this.object\n\n    const airshipObj = this._identifyObject(obj)\n    if (!airshipObj.isValid() || flag.isUncategorized()) {\n      return false\n    }\n\n    const allocation = this._getAllocation(flag, airshipObj)\n    const groupAllocation = this._getAllocation(flag, airshipObj.getGroup())\n\n    const finalAllocation = this._resolveAllocations(\n      allocation,\n      groupAllocation\n    )\n\n    const expo = this._getExposure(\n      flag,\n      airshipObj,\n      finalAllocation,\n      'is_enabled'\n    )\n    this._saveExposure(expo)\n\n    stat.stop()\n    this._saveStat(stat)\n    return !finalAllocation.treatment.isOffTreatment\n  }\n}\n","// Based on https://chrisrng.svbtle.com/lru-cache-in-javascript\nclass LRUNode {\n  constructor(key, value) {\n    if (typeof key === 'undefined' || key === null) {\n      throw 'Cannot have an undefined or null key for a LRUNode'\n    }\n    if (typeof value === 'undefined' || value === null) {\n      throw 'Cannot have an undefined or null value for a LRUNode'\n    }\n    this.key = key\n    this.value = value\n    this.prev = null\n    this.next = null\n  }\n}\n\nexport default class LRU {\n  constructor(limit) {\n    this.size = 0\n    if (typeof limit === 'number') {\n      this.limit = limit\n    } else {\n      this.limit = 10\n    }\n    this.map = {}\n    this.head = null\n    this.tail = null\n  }\n\n  setHead(node) {\n    node.next = this.head\n    node.prev = null\n    if (this.head !== null) {\n      this.head.prev = node\n    }\n    this.head = node\n    if (this.tail === null) {\n      this.tail = node\n    }\n    this.size++\n    this.map[node.key] = node\n  }\n\n  set(key, value) {\n    const node = new LRUNode(key, value)\n    if (this.map[key]) {\n      this.map[key].value = node.value\n      this.remove(node.key)\n    } else {\n      if (this.size >= this.limit) {\n        delete this.map[this.tail.key]\n        this.size--\n        this.tail = this.tail.prev\n        this.tail.next = null\n      }\n    }\n    this.setHead(node)\n  }\n\n  get(key) {\n    if (this.map[key]) {\n      const value = this.map[key].value\n      const node = new LRUNode(key, value)\n      this.remove(key)\n      this.setHead(node)\n      return value\n    } else {\n      // console.log('Key ' + key + ' does not exist in the cache.')\n      return null // Return null because null cannot be a LRUNode value\n    }\n  }\n\n  remove(key) {\n    const node = this.map[key]\n    if (node.prev !== null) {\n      node.prev.next = node.next\n    } else {\n      this.head = node.next\n    }\n    if (node.next !== null) {\n      node.next.prev = node.prev\n    } else {\n      this.tail = node.prev\n    }\n    delete this.map[key]\n    this.size--\n  }\n\n  removeAll(limit) {\n    this.size = 0\n    this.map = {}\n    this.head = null\n    this.tail = null\n    if (typeof limit === 'number') {\n      this.limit = limit\n    }\n  }\n\n  forEach(callback) {\n    let node = this.head\n    let i = 0\n    while (node) {\n      callback(node, i)\n      i++\n      node = node.next\n    }\n  }\n}\n","import Flag from './flag'\n\nexport default class Router {\n  constructor(gatingInfo) {\n    this.gatingInfo = gatingInfo\n    this.gatingInfoMap = this._getGatingInfoMap(this.gatingInfo)\n  }\n\n  _getGatingInfoMap(gatingInfo) {\n    const map = {}\n\n    const flags = gatingInfo.flags\n\n    for (let i = 0; i < flags.length; i++) {\n      const flag = Object.assign({}, flags[i])\n      if (flag.flagType === 'uncategorized' || flag.flagStatus === 'archived') {\n        map[flag.codename] = new Flag(flag)\n        continue\n      }\n\n      const overrides = flag.overrides\n      const overridesMap = {}\n\n      for (let j = 0; j < overrides.length; j++) {\n        const override = overrides[j]\n\n        overridesMap[`${override.entityType}_${override.entityId}`] = override\n      }\n\n      flag.overrides = overridesMap\n\n      const treatments = flag.treatments\n      const treatmentsMap = {}\n      let offTreatment = null\n\n      for (let k = 0; k < treatments.length; k++) {\n        const treatment = treatments[k]\n\n        treatmentsMap[treatment.treatmentId] = treatment\n\n        if (treatment.isOffTreatment) {\n          offTreatment = treatment\n        }\n      }\n\n      flag.treatments = treatments\n      flag.treatmentsMap = treatmentsMap\n      flag.offTreatment = offTreatment\n\n      map[flag.codename] = new Flag(flag)\n    }\n\n    return map\n  }\n\n  getIngestionMaxItem() {\n    const sdkInfo = this.gatingInfo.sdkInfo\n    if (sdkInfo) {\n      return sdkInfo.SDK_INGESTION_MAX_ITEMS\n    }\n    return null\n  }\n\n  getBrowserIngestionMaxItems() {\n    const sdkInfo = this.gatingInfo.sdkInfo\n    if (sdkInfo) {\n      return sdkInfo.SDK_BROWSER_INGESTION_MAX_ITEMS\n    }\n    return null\n  }\n\n  getIngestionInterval() {\n    const sdkInfo = this.gatingInfo.sdkInfo\n    if (sdkInfo) {\n      return sdkInfo.SDK_INGESTION_INTERVAL * 1000\n    }\n    return null\n  }\n\n  getBrowserIngestionInterval() {\n    const sdkInfo = this.gatingInfo.sdkInfo\n    if (sdkInfo) {\n      return sdkInfo.SDK_BROWSER_INGESTION_INTERVAL * 1000\n    }\n    return null\n  }\n\n  getShouldIngestObjects() {\n    const sdkInfo = this.gatingInfo.sdkInfo\n    if (sdkInfo && typeof sdkInfo.SDK_SHOULD_INGEST_OBJECTS === 'boolean') {\n      return sdkInfo.SDK_SHOULD_INGEST_OBJECTS\n    }\n    return null\n  }\n\n  getShouldIngestStats() {\n    const sdkInfo = this.gatingInfo.sdkInfo\n    if (sdkInfo && typeof sdkInfo.SDK_SHOULD_INGEST_STATS === 'boolean') {\n      return sdkInfo.SDK_SHOULD_INGEST_STATS\n    }\n    return null\n  }\n\n  getShouldIngestExposures() {\n    const sdkInfo = this.gatingInfo.sdkInfo\n    if (sdkInfo && typeof sdkInfo.SDK_SHOULD_INGEST_EXPOSURES === 'boolean') {\n      return sdkInfo.SDK_SHOULD_INGEST_EXPOSURES\n    }\n    return null\n  }\n\n  getShouldIngestFlags() {\n    const sdkInfo = this.gatingInfo.sdkInfo\n    if (sdkInfo && typeof sdkInfo.SDK_SHOULD_INGEST_FLAGS === 'boolean') {\n      return sdkInfo.SDK_SHOULD_INGEST_FLAGS\n    }\n    return null\n  }\n\n  getFlag(flagName) {\n    return this.gatingInfoMap[flagName] || new Flag(flagName)\n  }\n\n  getEnv() {\n    return this.gatingInfo.env\n  }\n\n  isLocallyConfigured() {\n    return this.getEnv().envKey === null\n  }\n}\n","import EventSource from 'eventsource'\nimport Environment from './environment'\nimport {logger} from './logger'\nimport LRU from './lru'\nimport Router from './router'\nimport Stat from './stat'\nimport {version} from '../package.json'\n\nimport * as http from 'http'\nimport * as https from 'https'\nimport * as URL from 'url'\n\n// Default API domain\nconst DEFAULT_API_DOMAIN = 'airshiphq.com'\n\n// Primary API endpoints\nconst IDENTIFY_ENDPOINT = `/v2/identify`\nconst GATING_INFO_ENDPOINT = `/v2/gating-info`\n\n// SSE API endpoints\nconst SSE_GATING_INFO_ENDPOINT = `/v2/sse-events`\n\n// Backup API URL & endpoint\nconst BACKUP_URL = 'https://backup-api.airshiphq.com'\nconst BACKUP_GATING_INFO_ENDPOINT = `${BACKUP_URL}/v2/gating-info`\n\nconst REQUEST_TIMEOUT = 10 * 1000\n\n// Default ingestion parameters\nconst DEFAULT_INGESTION_INTERVAL = 30\nconst DEFAULT_BROWSER_INGESTION_INTERVAL = 15\nconst DEFAULT_INGESTION_MAX_ITEMS = 500\nconst DEFAULT_BROWSER_INGESTION_MAX_ITEMS = 5\n\nexport default class Airship extends Environment {\n  constructor(gatingInfoListener) {\n    super()\n\n    this.gatingInfoListener = gatingInfoListener\n    this.init()\n  }\n\n  init() {\n    this.ingestionMaxItems = DEFAULT_INGESTION_MAX_ITEMS\n    this.ingestionInterval = DEFAULT_INGESTION_INTERVAL * 1000\n\n    // eslint-disable-next-line no-undef\n    if (__BROWSER__) {\n      this.ingestionMaxItems = DEFAULT_BROWSER_INGESTION_MAX_ITEMS\n      this.ingestionInterval = DEFAULT_BROWSER_INGESTION_INTERVAL * 1000\n    }\n\n    this.objects = []\n    this.stats = []\n    this.exposures = []\n    this.flags = new Set()\n    this.oldFlags = new Set()\n\n    this.objectLRUCache = new LRU(500)\n    this.firstIngestion = true\n\n    this.shouldIngestObjects = true\n    this.shouldIngestStats = true\n    this.shouldIngestExposures = true\n    this.shouldIngestFlags = true\n\n    // this.restartIngestionWorker()\n  }\n\n  restartIngestionWorker() {\n    if (this.ingestionWorker) {\n      clearInterval(this.ingestionWorker)\n    }\n\n    this.ingestionWorker = setInterval(() => {\n      this.maybeIngest(true)\n    }, this.ingestionInterval)\n  }\n\n  async maybeIngest(force = false) {\n    if (!this.shouldIngestObjects) {\n      this.objects = []\n    }\n\n    if (!this.shouldIngestStats) {\n      this.stats = []\n    }\n\n    if (!this.shouldIngestExposures) {\n      this.exposures = []\n    }\n\n    if (!this.shouldIngestFlags) {\n      this.flags = new Set()\n    }\n\n    let shouldIngest =\n      force ||\n      (this.objects.length >= this.ingestionMaxItems ||\n        this.stats.length >= this.ingestionMaxItems ||\n        this.exposures.length >= this.ingestionMaxItems ||\n        this.flags.size > 0)\n\n    if (this.firstIngestion) {\n      shouldIngest = shouldIngest || this.objects.length > 0\n      this.firstIngestion = !shouldIngest\n    }\n\n    if (\n      this.objects.length === 0 &&\n      this.stats.length === 0 &&\n      this.exposures.length === 0 &&\n      this.flags.size === 0\n    ) {\n      shouldIngest = false\n    }\n\n    if (shouldIngest) {\n      const objects = this.objects\n      const stats = this.stats\n      const exposures = this.exposures\n      const flags = Array.from(this.flags)\n      flags.forEach(flagName => {\n        this.oldFlags.add(flagName)\n      })\n\n      this.objects = []\n      this.stats = []\n      this.exposures = []\n      this.flags = new Set()\n\n      await this.postContent(\n        this.primaryServerUrl + IDENTIFY_ENDPOINT + '/' + this.envKey,\n        JSON.stringify({\n          objects: objects,\n          stats: stats.map(s => s.getStatsObj()).filter(so => so !== null),\n          exposures: exposures,\n          flags: flags,\n          sdkInfo: {\n            name: '__SDK_NAME__',\n            version: version\n          }\n        })\n      ).catch(err => {\n        logger(err)\n      })\n    }\n  }\n\n  _identifyObject(obj) {\n    const airshipObj = Environment.prototype._identifyObject.call(this, obj)\n\n    if (!airshipObj.isValid()) {\n      return airshipObj\n    }\n    const id = airshipObj.getId()\n    const hash = airshipObj.getHash()\n    const storedHash = this.objectLRUCache.get(id)\n    if (storedHash === null || hash !== storedHash) {\n      this.objects.push(airshipObj.getRawObject())\n    }\n\n    this.objectLRUCache.set(id, hash)\n    this.maybeIngest()\n\n    return airshipObj\n  }\n\n  _compactStats() {\n    this.stats = Stat.compactStats(this.stats)\n  }\n\n  _saveStat(stat) {\n    this.stats.push(stat)\n    if (this.stats.length >= this.ingestionMaxItems) {\n      this._compactStats()\n    }\n    this.maybeIngest()\n  }\n\n  _saveExposure(expo) {\n    this.exposures.push(expo)\n    this.maybeIngest()\n  }\n\n  async publish(objs) {\n    if (!Array.isArray(objs)) {\n      logger('The \"publish\" method takes an array of objects (aka entities).')\n      return\n    }\n\n    objs.forEach(obj => {\n      this._identifyObject(obj)\n    })\n\n    await this.maybeIngest(true)\n  }\n\n  async getContent(url, timeout = REQUEST_TIMEOUT) {\n    // return new Promise((resolve, reject) => {\n      const urlObj = URL.parse(url)\n\n      const lib = urlObj.protocol === 'https:' ? https : http\n      console.log(\"url: \", url)\n      const response = await fetch(url)\n      console.log(\"response: \", response)\n      const data =  await response.json()\n      console.log(\"data: \", data)\n      return data\n      // const request = lib.get(url, response => {\n      //   if (response.statusCode < 200 || response.statusCode > 299) {\n      //     reject('Failed to load page, status code: ' + response.statusCode)\n      //   }\n      //   const body = []\n\n      //   response.on('data', chunk => body.push(chunk))\n\n      //   response.on('end', () => {\n      //     resolve(body.join(''))\n      //   })\n      // })\n\n      // request.on('error', err => reject(err))\n\n      // request.setTimeout(timeout, () => {\n      //   request.abort()\n      //   reject('Request timed out')\n      // })\n    // })\n  }\n\n  postContent(\n    url,\n    data,\n    contentType = 'application/json',\n    timeout = REQUEST_TIMEOUT\n  ) {\n    return new Promise((resolve, reject) => {\n      const urlObj = URL.parse(url)\n\n      const lib = urlObj.protocol === 'https:' ? https : http\n\n      const options = {\n        protocol: urlObj.protocol,\n        hostname: urlObj.hostname,\n        port: urlObj.port,\n        path: urlObj.path,\n        method: 'POST',\n        headers: {\n          'Content-Type': contentType,\n          'Content-Length': Buffer.byteLength(data)\n        }\n      }\n      const request = lib.request(options, response => {\n        if (response.statusCode < 200 || response.statusCode > 299) {\n          reject('Failed to post to url, status code: ' + response.statusCode)\n        }\n\n        const body = []\n\n        response.on('data', chunk => body.push(chunk))\n\n        response.on('end', () => resolve(body.join('')))\n      })\n\n      request.on('error', err => {\n        reject(err)\n      })\n\n      request.setTimeout(timeout, () => {\n        request.abort()\n        reject('Request timed out')\n      })\n\n      request.write(data)\n      request.end()\n    })\n  }\n\n  async _getGatingInfo() {\n    const body = await this.getContent(\n      `${this.primaryServerUrl}${GATING_INFO_ENDPOINT}/${\n        this.envKey\n      }?casing=camel`\n    )\n    return body\n  }\n\n  async _getBackupGatingInfo() {\n    const body = await this.getContent(\n      `${BACKUP_GATING_INFO_ENDPOINT}/${this.envKey}-camel`\n    )\n    return body\n  }\n\n  updateSDK() {\n    const ingestionMaxItems = this.router.getIngestionMaxItem()\n    const browserIngestionMaxItems = this.router.getBrowserIngestionMaxItems()\n    const ingestionInterval = this.router.getIngestionInterval()\n    const browserIngestionInterval = this.router.getBrowserIngestionInterval()\n    const shouldIngestObjects = this.router.getShouldIngestObjects()\n    const shouldIngestStats = this.router.getShouldIngestStats()\n    const shouldIngestExposures = this.router.getShouldIngestExposures()\n    const shouldIngestFlags = this.router.getShouldIngestFlags()\n\n    // eslint-disable-next-line no-undef\n    if (__BROWSER__) {\n      // Use SDK info's browserIngestionMaxItems threshold instead (if it exists)\n      if (\n        typeof browserIngestionMaxItems === 'number' &&\n        browserIngestionMaxItems > 0\n      ) {\n        this.ingestionMaxItems = browserIngestionMaxItems\n        this.restartIngestionWorker()\n      }\n\n      // Use SDK info's ingestionInterval instead (if it exists)\n      if (\n        typeof browserIngestionInterval === 'number' &&\n        browserIngestionInterval > 0 &&\n        browserIngestionInterval != this.ingestionInterval\n      ) {\n        this.ingestionInterval = browserIngestionInterval\n        this.restartIngestionWorker()\n      }\n    } else {\n      // Use SDK info's ingestionMaxItem threshold instead (if it exists)\n      if (typeof ingestionMaxItems === 'number' && ingestionMaxItems > 0) {\n        this.ingestionMaxItems = ingestionMaxItems\n        this.restartIngestionWorker()\n      }\n\n      // Use SDK info's ingestionInterval instead (if it exists)\n      if (\n        typeof ingestionInterval === 'number' &&\n        ingestionInterval > 0 &&\n        ingestionInterval != this.ingestionInterval\n      ) {\n        this.ingestionInterval = ingestionInterval\n        this.restartIngestionWorker()\n      }\n    }\n\n    // Check if SDK info directs SDK to ingest entities\n    if (typeof shouldIngestObjects === 'boolean') {\n      this.shouldIngestObjects = shouldIngestObjects\n    }\n\n    // Check if SDK info directs SDK to ingest stats\n    if (typeof shouldIngestStats === 'boolean') {\n      this.shouldIngestStats = shouldIngestStats\n    }\n\n    // Check if SDK info directs SDK to ingest exposures\n    if (typeof shouldIngestExposures === 'boolean') {\n      this.shouldIngestExposures = shouldIngestExposures\n    }\n\n    // Check if SDK info directs SDK to ingest flags\n    if (typeof shouldIngestFlags === 'boolean') {\n      this.shouldIngestFlags = shouldIngestFlags\n    }\n  }\n\n  async updateGatingInfo(statName, fetchFn) {\n    try {\n      const stat = new Stat(statName, Stat.TYPE_DURATION)\n      stat.start()\n      const result = await fetchFn()\n      const gatingInfo = result\n      this.router = new Router(gatingInfo)\n      this.updateSDK()\n      if (this.gatingInfoListener) {\n        this.gatingInfoListener(gatingInfo)\n      }\n      stat.stop()\n      this._saveStat(stat)\n    } catch (err) {\n      console.log(err)\n      logger(err)\n\n      return false\n    }\n    return true\n  }\n\n  async configure(\n    envKey,\n    subscribeToUpdates = true,\n    apiDomain = DEFAULT_API_DOMAIN\n  ) {\n    const envKeyRegex = /^[a-z0-9]{16}$/\n    if (!envKey.match(envKeyRegex)) {\n      throw 'options[\"envKey\"] should be a string of lowercase characters and digits. Double check on the Airship web app.'\n    }\n\n    this.envKey = envKey\n    this.subscribeToUpdates = subscribeToUpdates\n\n    this.primaryServerUrl = `https://api.${apiDomain}`\n    this.sseServerUrl = `https://sse.${apiDomain}`\n\n    this.init()\n\n    this.failed = false\n\n    console.log('primaryServerUrl: ', this.primaryServerUrl)\n\n    // First try the Airship server\n    if (\n      !(await this.updateGatingInfo(\n        'duration__gating_info',\n        this._getGatingInfo.bind(this)\n      ))\n    ) {\n      // Then try the Airship CloudFront distribution\n      this.failed = !(await this.updateGatingInfo(\n        'duration__cloudfront_gating_info',\n        this._getBackupGatingInfo.bind(this)\n      ))\n    }\n\n    if (this.failed) {\n      throw 'Failed to retrieve initial gating information'\n    }\n\n    if (subscribeToUpdates) {\n      this._subscribeToUpdates()\n      this._policeSSE()\n    }\n  }\n\n  async shutdown() {\n    if (this.ingestionWorker) {\n      clearInterval(this.ingestionWorker)\n    }\n\n    this._unpoliceSSE()\n    this._unsubscribeFromUpdates()\n\n    await this.maybeIngest(true)\n  }\n\n  flag(flagName) {\n    const flag = Environment.prototype.flag.call(this, flagName)\n    if (flag.isWild()) {\n      // Register the new uncategorized flag\n      if (!this.oldFlags.has(flagName)) {\n        this.flags.add(flagName)\n        this.maybeIngest()\n      }\n    }\n    return flag\n  }\n\n  _policeSSE() {\n    this._unpoliceSSE()\n    this.policeSSEInterval = setInterval(() => {\n      const now = Date.now()\n      const then = this.lastSSEConnectTimestamp || 0\n      if ((now - then) / 1000 > 30) {\n        logger(\n          'Did not receive a keepalive for more than 30 seconds. Reconnecting.'\n        )\n        this._subscribeToUpdates()\n      }\n    }, 5 * 1000)\n\n    this.pollGatingInfoInterval = setInterval(() => {\n      const now = Date.now()\n      const then = this.lastSSEConnectTimestamp || 0\n      if ((now - then) / 1000 > 60) {\n        logger(\n          'Did not receive a keepalive for more than 30 seconds. Polling gating info.'\n        )\n        this.updateGatingInfo(\n          'duration__cloudfront_gating_info',\n          this._getBackupGatingInfo.bind(this)\n        ).then(\n          () => logger('Polled gating info from CloudFront'),\n          () => logger('Failed polling gating info from CloudFront')\n        )\n      }\n    }, 60 * 1000)\n  }\n\n  _unpoliceSSE() {\n    if (this.policeSSEInterval) {\n      clearInterval(this.policeSSEInterval)\n      delete this.policeSSEInterval\n\n      if (this.lastSSEConnectTimestamp) {\n        delete this.lastSSEConnectTimestamp\n      }\n    }\n\n    if (this.pollGatingInfoInterval) {\n      clearInterval(this.pollGatingInfoInterval)\n      delete this.pollGatingInfoInterval\n    }\n  }\n\n  _subscribeToUpdates() {\n    this._unsubscribeFromUpdates()\n\n    this.eventSource = new EventSource(\n      `${this.sseServerUrl}${SSE_GATING_INFO_ENDPOINT}?envkey=${\n        this.envKey\n      }&casing=camel`\n    )\n    this.eventSource.addEventListener('gatingInfoUpdate', evt => {\n      const gatingInfo = JSON.parse(evt.data)\n      this.router = new Router(gatingInfo)\n      this.updateSDK()\n      if (this.gatingInfoListener) {\n        this.gatingInfoListener(gatingInfo)\n      }\n      this.lastSSEConnectTimestamp = Date.now()\n    })\n\n    this.eventSource.addEventListener('keepalive', () => {\n      this.lastSSEConnectTimestamp = Date.now()\n    })\n  }\n\n  _unsubscribeFromUpdates() {\n    if (this.eventSource) {\n      this.eventSource.close()\n      delete this.eventSource\n    }\n  }\n}\n","import {logger} from '../logger'\n// import Ajv from 'ajv'\n// import ajvErrors from 'ajv-errors'\n\nconst SCHEMA = {\n  type: 'object',\n  patternProperties: {\n    '^.{1,150}$': {\n      type: 'object',\n      properties: {\n        whitelist: {\n          type: 'array',\n          items: {\n            type: ['integer', 'string'],\n            errorMessage: {\n              type:\n                'An ID can be a string or integer. Integer ID will be cast into a string.'\n            }\n          },\n          errorMessage: {\n            type: '`whitelist` must be an array of IDs (string|integer)'\n          }\n        },\n        blacklist: {\n          type: 'array',\n          items: {\n            type: ['integer', 'string'],\n            errorMessage: {\n              type:\n                'An ID can be a string or integer. Integer ID will be cast into a string.'\n            }\n          },\n          errorMessage: {\n            type: '`blacklist` must be an array of IDs (string|integer)'\n          }\n        },\n        population: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              attribute: {\n                type: 'string',\n                maxLength: 50,\n                errorMessage: {\n                  type:\n                    'A population\\'s filter attribute must be a string of 50 characters or less. E.g., \"age\", \"height\", \"birthDate\", etc.',\n                  maxLength:\n                    'A population\\'s filter attribute must be a string of 50 characters or less. E.g., \"age\", \"height\", \"birthDate\", etc.'\n                }\n              },\n              operator: {\n                type: 'string',\n                enum: [\n                  'is',\n                  'is_not',\n                  'in',\n                  'not_in',\n                  'lt',\n                  'lte',\n                  'gt',\n                  'gte',\n                  'from',\n                  'until',\n                  'after',\n                  'before'\n                ],\n                errorMessage: {\n                  type:\n                    'A population\\'s filter operator must be a string and must be one of: [\"is\", \"is_not\", \"in\", \"not_in\", \"lt\", \"lte\", \"gt\", \"gte\", \"from\", \"until\", \"after\", \"before\"]',\n                  enum:\n                    'A population\\'s filter operator must be a string and must be one of: [\"is\", \"is_not\", \"in\", \"not_in\", \"lt\", \"lte\", \"gt\", \"gte\", \"from\", \"until\", \"after\", \"before\"]'\n                }\n              },\n              value: {\n                type: ['number', 'string', 'boolean', 'array'],\n                maxLength: 3000,\n                items: {\n                  oneOf: [\n                    {\n                      type: 'number',\n                      errorMessage: {\n                        type:\n                          \"A population's filter valueList must contain numbers or strings.\"\n                      }\n                    },\n                    {\n                      type: 'string',\n                      maxLength: 3000,\n                      errorMessage: {\n                        maxLength:\n                          'A string value for a population filter must be 3000 characters or less'\n                      }\n                    }\n                  ]\n                },\n                minItems: 1,\n                errorMessage: {\n                  type:\n                    \"A population's filter value is a number, string, or boolean or an array of numbers or strings.\",\n                  maxLength:\n                    'A string value for a population filter must be 3000 characters or less',\n                  minItems:\n                    \"A population's filter value must have at least one item if it is an array.\"\n                }\n              }\n            },\n            errorMessage: {\n              type:\n                'Each filter within a population is represented by an object of the form: {attribute: <attribute>, operator: <operator>, value/valueList: <value>/<valueList>}'\n            }\n          },\n          errorMessage: {\n            type:\n              '`population` must be an array of filters, each of the form: {attribute: <attribute>, operator: <operator>, value/valueList: <value>/<valueList>}'\n          }\n        },\n        sample: {\n          type: 'number',\n          minimum: 0.0,\n          maximum: 1.0,\n          errorMessage: {\n            type: '`sample` must be a float between 0.0 and 1.0, inclusive',\n            minimum: '`sample` must be between 0.0 and 1.0, inclusive',\n            maximum: '`sample` must be between 0.0 and 1.0, inclusive'\n          }\n        },\n        active: {\n          type: 'boolean',\n          errorMessage: {\n            type: '`active` must be a boolean'\n          }\n        }\n      },\n      additionalProperties: false,\n      errorMessage: {\n        type:\n          'flagConfig must be a dictionary of flag name keys to flag configuration values',\n        additionalProperties:\n          'Unexpected config option found. Please refer to the documentation.'\n      }\n    }\n  },\n  errorMessage: {\n    patternProperties: 'Flag name must be strings of up to 150 characters.'\n  }\n}\n\n// const ajv = Ajv({allErrors: true, jsonPointers: true})\n// ajvErrors(ajv)\nconst validate = ()=> {return true}\n\nexport const isValidFlagConfig = flagConfig => {\n  const isValid = validate(flagConfig)\n  if (!isValid) {\n    logger(validate.errors.map(e => e.message))\n  }\n  return isValid\n}\n\n","import {logger} from '../logger'\nimport {isValidFlagConfig} from '../validators/core_validator'\nimport Population, {\n  RULE_TYPE_STRING,\n  RULE_TYPE_INT,\n  RULE_TYPE_FLOAT,\n  RULE_TYPE_BOOLEAN,\n  RULE_TYPE_DATE,\n  RULE_TYPE_DATETIME,\n  RULE_OPERATOR_IS,\n  RULE_OPERATOR_IS_NOT,\n  RULE_OPERATOR_IN,\n  RULE_OPERATOR_NOT_IN,\n  RULE_OPERATOR_LT,\n  RULE_OPERATOR_LTE,\n  RULE_OPERATOR_GT,\n  RULE_OPERATOR_GTE,\n  RULE_OPERATOR_FROM,\n  RULE_OPERATOR_UNTIL,\n  RULE_OPERATOR_AFTER,\n  RULE_OPERATOR_BEFORE\n} from '../population'\n\nconst RULE_TYPE_TO_ALLOWED_OPERATORS = {\n  [RULE_TYPE_STRING]: new Set([\n    RULE_OPERATOR_IS,\n    RULE_OPERATOR_IS_NOT,\n    RULE_OPERATOR_IN,\n    RULE_OPERATOR_NOT_IN\n  ]),\n  [RULE_TYPE_INT]: new Set([\n    RULE_OPERATOR_IS,\n    RULE_OPERATOR_IS_NOT,\n    RULE_OPERATOR_IN,\n    RULE_OPERATOR_NOT_IN,\n    RULE_OPERATOR_LT,\n    RULE_OPERATOR_LTE,\n    RULE_OPERATOR_GT,\n    RULE_OPERATOR_GTE\n  ]),\n  [RULE_TYPE_FLOAT]: new Set([\n    RULE_OPERATOR_IS,\n    RULE_OPERATOR_IS_NOT,\n    RULE_OPERATOR_IN,\n    RULE_OPERATOR_NOT_IN,\n    RULE_OPERATOR_LT,\n    RULE_OPERATOR_LTE,\n    RULE_OPERATOR_GT,\n    RULE_OPERATOR_GTE\n  ]),\n  [RULE_TYPE_BOOLEAN]: new Set([RULE_OPERATOR_IS, RULE_OPERATOR_IS_NOT]),\n  [RULE_TYPE_DATE]: new Set([\n    RULE_OPERATOR_IS,\n    RULE_OPERATOR_IS_NOT,\n    RULE_OPERATOR_IN,\n    RULE_OPERATOR_NOT_IN,\n    RULE_OPERATOR_FROM,\n    RULE_OPERATOR_UNTIL,\n    RULE_OPERATOR_AFTER,\n    RULE_OPERATOR_BEFORE\n  ]),\n  [RULE_TYPE_DATETIME]: new Set([\n    RULE_OPERATOR_IS,\n    RULE_OPERATOR_IS_NOT,\n    RULE_OPERATOR_IN,\n    RULE_OPERATOR_NOT_IN,\n    RULE_OPERATOR_FROM,\n    RULE_OPERATOR_UNTIL,\n    RULE_OPERATOR_AFTER,\n    RULE_OPERATOR_BEFORE\n  ])\n}\n\nexport const transformFlagConfig = flagConfig => {\n  if (!isValidFlagConfig(flagConfig)) {\n    return null\n  }\n\n  const flags = []\n  const keys = Object.keys(flagConfig)\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const config = flagConfig[key]\n    const active = config.active !== undefined ? config.active : true\n    const flagInfo = {\n      flagType: 'basic',\n      hashKey: key,\n      isPaused: !active,\n      isWebAccessible: __BROWSER__, // eslint-disable-line no-undef\n      codename: key,\n      flagStatus: 'operational'\n    }\n    const whitelist = config.whitelist || []\n    const blacklist = config.blacklist || []\n    const blacklistSet = new Set(blacklist)\n    const filteredWhitelist = whitelist.filter(i => !blacklistSet.has(i))\n\n    flagInfo.treatments = [\n      {\n        treatmentId: 'off-treatment',\n        codename: 'off',\n        isControl: false,\n        isOffTreatment: true\n      },\n      {\n        treatmentId: 'on-treatment',\n        codename: 'on',\n        isControl: false,\n        isOffTreatment: false\n      }\n    ]\n\n    flagInfo.overrides = []\n\n    flagInfo.overrides = flagInfo.overrides.concat(\n      filteredWhitelist.map(i => ({\n        treatmentId: 'on-treatment',\n        entityType: 'User',\n        entityId: i.toString()\n      }))\n    )\n\n    flagInfo.overrides = flagInfo.overrides.concat(\n      blacklist.map(i => ({\n        treatmentId: 'off-treatment',\n        entityType: 'User',\n        entityId: i.toString()\n      }))\n    )\n\n    flagInfo.splits = [{treatmentId: 'on-treatment', percentage: 1}]\n\n    if (config.population) {\n      const rules = config.population || []\n      const ruleInfos = []\n\n      for (let j = 0; j < rules.length; j++) {\n        const r = rules[j]\n        let type\n        if (Array.isArray(r.value)) {\n          const types = new Set(\n            r.value.map(v => Population.categorizeValueType(v))\n          )\n\n          if (types.size != 1) {\n            logger(\n              \"Population's filter criteria each should have a singular value type. In other words, do not mix strings with numbers in the same array, for example.\"\n            )\n            return null\n          }\n\n          type = Array.from(types)[0]\n        } else {\n          type = Population.categorizeValueType(r.value)\n        }\n\n        const rInfo = {\n          attributeName: r.attribute,\n          attributeType: type,\n          operator: r.operator,\n          value: !Array.isArray(r.value) ? r.value : null,\n          valueList: !Array.isArray(r.value) ? null : r.value\n        }\n\n        if (!RULE_TYPE_TO_ALLOWED_OPERATORS[type].has(r.operator)) {\n          logger(\n            `Population's filter operator \\`${\n              r.operator\n            }\\` is not allowed for filter type \\`${type}\\``\n          )\n          return null\n        }\n\n        if (rInfo.valueList) {\n          if (\n            rInfo.operator !== RULE_OPERATOR_IN &&\n            rInfo.operator !== RULE_OPERATOR_NOT_IN\n          ) {\n            logger(\n              \"Population's filter operator must be `in` or `not_in` if the value is an array.\"\n            )\n            return null\n          }\n        } else {\n          if (\n            rInfo.operator === RULE_OPERATOR_IN &&\n            rInfo.operator === RULE_OPERATOR_NOT_IN\n          ) {\n            logger(\n              \"Population's filter operator must not be `in` or `not_in` if the value is a number, boolean or string.\"\n            )\n            return null\n          }\n        }\n\n        ruleInfos.push(rInfo)\n      }\n\n      flagInfo.populations = [\n        {\n          hashKey: 'population-1',\n          entityType: 'User',\n          percentage: config.sample || 0.0,\n          rules: ruleInfos,\n          universes: []\n        }\n      ]\n    } else {\n      flagInfo.populations = [\n        {\n          hashKey: 'population-1',\n          entityType: 'User',\n          percentage: config.sample || 0.0,\n          rules: [],\n          universes: []\n        }\n      ]\n    }\n\n    flags.push(flagInfo)\n  }\n\n  return {\n    flags: flags,\n    env: {\n      hashKey: 'env-1',\n      envKey: null\n    }\n  }\n}\n","import Environment from './environment'\nimport Router from './router'\nimport {transformFlagConfig} from './transformers/core_transformer'\n\nexport default class Core extends Environment {\n  async configure(flagConfig) {\n    const gatingInfo = transformFlagConfig(flagConfig)\n    if (gatingInfo === null) {\n      throw 'Failed to transform flagConfig into initial gating information'\n    }\n    this.router = new Router(gatingInfo)\n  }\n}\n","import {setLogger} from './logger'\nimport Airship from './airship'\nimport Core from './core'\n\nconst defaultEnv = new Core()\ndefaultEnv.configure({})\n\nexport class FlaggerBase {\n  constructor() {\n    this.gatingInfoListeners = []\n  }\n\n  static _isDict(obj) {\n    return obj !== undefined && obj !== null && obj.constructor === Object\n  }\n\n  async publish(objs) {\n    if (this.environment) {\n      await this.environment.publish(objs)\n    } else {\n      throw 'Airship must be configured first before `publish` can be called'\n    }\n  }\n\n  // This will allow for async/await\n  async configure(options) {\n    if (!FlaggerBase._isDict(options)) {\n      throw '<options> must be dictionary'\n    }\n\n    const envKey = options.envKey\n    const flagConfig = options.flagConfig\n\n    if (!envKey && !flagConfig) {\n      throw '<options> must contain envKey corresponding to an environment key or a flagConfig dictionary to configure locally'\n    }\n\n    const subscribeToUpdates =\n      options.subscribeToUpdates === false ? false : true\n\n    if (envKey) {\n      if (\n        this.environment &&\n        this.environment.envKey === envKey &&\n        this.environment.subscribeToUpdates === subscribeToUpdates &&\n        this.environment.environmentPromise &&\n        !this.environment.failed\n      ) {\n        await this.environment.environmentPromise\n      } else {\n        if (this.environment) {\n          await this.environment.shutdown()\n        }\n        this.environment = new Airship(this.handleGatingInfoUpdate.bind(this))\n        const promise = this.environment.configure(\n          envKey,\n          options.subscribeToUpdates,\n          options.apiDomain\n        )\n        this.environment.environmentPromise = promise\n        await promise\n      }\n    } else {\n      if (this.environment) {\n        await this.environment.shutdown()\n      }\n      this.environment = new Core()\n      await this.environment.configure(flagConfig)\n    }\n  }\n\n  async shutdown() {\n    if (this.environment) {\n      await this.environment.shutdown()\n      delete this.environment\n    } else {\n      throw 'Airship must be configured first before `shutdown` can be called'\n    }\n  }\n\n  flag(flagName) {\n    return (this.environment || defaultEnv).flag(flagName)\n  }\n\n  setErrorListener(fn) {\n    setLogger(fn)\n  }\n\n  handleGatingInfoUpdate(gatingInfo) {\n    this.gatingInfoListeners.forEach(listener => listener(gatingInfo))\n  }\n\n  addGatingInfoListener(listener) {\n    this.gatingInfoListeners.push(listener)\n  }\n\n  removeGatingInfoListener(listener) {\n    this.gatingInfoListeners = this.gatingInfoListeners.filter(\n      l => l !== listener\n    )\n  }\n\n  identify(obj) {\n    if (this.environment) {\n      this.environment.identify(obj)\n      this.environment._identifyObject(obj)\n      this.environment.maybeIngest(true)\n    } else {\n      throw 'Airship must be configured first before `identify` can be called'\n    }\n  }\n}\n\nconst Flagger = new FlaggerBase()\n\nexport default Flagger\n","import Airship, {FlaggerBase} from './index'\nObject.assign(Airship, {FlaggerBase})\n\nexport default Airship\n"],"names":["logger","x","console","error","setLogger","fn","validate","DEFAULT_ENTITY_TYPE","AirshipObject","obj","isValid","isValidObject","object","_cloneObject","_fillInFields","md5","stringify","attributes","group","type","id","clone","errors","map","e","message","isGroup","undefined","groupIndex","lastIndexOf","length","displayName","idStr","RULE_TYPE_STRING","RULE_TYPE_INT","RULE_TYPE_FLOAT","RULE_TYPE_BOOLEAN","RULE_TYPE_DATE","RULE_TYPE_DATETIME","RULE_OPERATOR_IS","RULE_OPERATOR_IS_NOT","RULE_OPERATOR_IN","RULE_OPERATOR_NOT_IN","RULE_OPERATOR_LT","RULE_OPERATOR_LTE","RULE_OPERATOR_GT","RULE_OPERATOR_GTE","RULE_OPERATOR_FROM","RULE_OPERATOR_UNTIL","RULE_OPERATOR_AFTER","RULE_OPERATOR_BEFORE","getHashedValue","s","Population","population","rule","hasOwnProperty","attributeName","v","attributeType","categorizeValueType","numberTypes","indexOf","targetVal","value","targetValList","valueList","op","operator","targetTime","Date","getTime","targetTimeList","tv","vTime","env","flag","sticky","entityType","eligible","rules","matches","i","r","_ruleMatches","samplingHashKey","hashKey","hashedPercentage","percentage","splits","universes","Math","max","floor","splitsMap","split","treatmentId","allocationHashKey","allocationHashedPercentage","trailingSum","treatments","filter","t","isOffTreatment","treatment","toFixed","unixTimestamp","isNaN","isoFormat","toISOString","timeIndex","Stat","stats","groups","reduce","stat","key","name","join","push","newStat","totalDuration","totalCount","TYPE_DURATION","duration","averageDuration","count","setAverageDuration","setCount","TYPE_COUNT","allowedTypes","startTime","n","statsObj","unit","Flag","delegate","_isWild","flagName","codename","isPaused","offTreatment","treatmentsMap","overrides","populations","Boolean","flagType","flagStatus","getTreatment","getPayload","isEligible","isEnabled","Environment","airshipObj","objs","router","getFlag","setDelegate","isArchived","getId","override","fromOverride","getRawObject","useUniverses","getType","p","gateValues","getGateValues","getEnv","alloc1","alloc2","alloc","methodCalled","timeExposed","start","_identifyObject","isUncategorized","allocation","_getAllocation","groupAllocation","getGroup","finalAllocation","_resolveAllocations","expo","_getExposure","_saveExposure","stop","_saveStat","isGhost","payload","LRUNode","prev","next","LRU","limit","size","head","tail","node","remove","setHead","callback","Router","gatingInfo","gatingInfoMap","_getGatingInfoMap","flags","overridesMap","j","entityId","k","sdkInfo","SDK_INGESTION_MAX_ITEMS","SDK_BROWSER_INGESTION_MAX_ITEMS","SDK_INGESTION_INTERVAL","SDK_BROWSER_INGESTION_INTERVAL","SDK_SHOULD_INGEST_OBJECTS","SDK_SHOULD_INGEST_STATS","SDK_SHOULD_INGEST_EXPOSURES","SDK_SHOULD_INGEST_FLAGS","envKey","DEFAULT_API_DOMAIN","IDENTIFY_ENDPOINT","GATING_INFO_ENDPOINT","SSE_GATING_INFO_ENDPOINT","BACKUP_URL","BACKUP_GATING_INFO_ENDPOINT","REQUEST_TIMEOUT","DEFAULT_INGESTION_INTERVAL","DEFAULT_BROWSER_INGESTION_INTERVAL","DEFAULT_INGESTION_MAX_ITEMS","DEFAULT_BROWSER_INGESTION_MAX_ITEMS","Airship","gatingInfoListener","init","ingestionMaxItems","ingestionInterval","objects","exposures","oldFlags","objectLRUCache","firstIngestion","shouldIngestObjects","shouldIngestStats","shouldIngestExposures","shouldIngestFlags","ingestionWorker","clearInterval","setInterval","maybeIngest","force","shouldIngest","forEach","add","postContent","primaryServerUrl","getStatsObj","so","version","catch","err","prototype","call","hash","getHash","storedHash","get","set","compactStats","_compactStats","url","timeout","urlObj","URL","lib","protocol","https","http","log","fetch","response","json","data","contentType","resolve","reject","options","hostname","port","path","method","headers","Buffer","byteLength","request","statusCode","body","on","chunk","setTimeout","abort","write","end","getContent","getIngestionMaxItem","browserIngestionMaxItems","getBrowserIngestionMaxItems","getIngestionInterval","browserIngestionInterval","getBrowserIngestionInterval","getShouldIngestObjects","getShouldIngestStats","getShouldIngestExposures","getShouldIngestFlags","restartIngestionWorker","statName","fetchFn","result","updateSDK","subscribeToUpdates","apiDomain","envKeyRegex","match","sseServerUrl","failed","updateGatingInfo","_getGatingInfo","bind","_getBackupGatingInfo","_subscribeToUpdates","_policeSSE","_unpoliceSSE","_unsubscribeFromUpdates","isWild","has","policeSSEInterval","now","then","lastSSEConnectTimestamp","pollGatingInfoInterval","eventSource","EventSource","addEventListener","evt","JSON","parse","close","isValidFlagConfig","flagConfig","RULE_TYPE_TO_ALLOWED_OPERATORS","transformFlagConfig","keys","config","active","flagInfo","isWebAccessible","whitelist","blacklist","blacklistSet","filteredWhitelist","isControl","concat","toString","ruleInfos","types","rInfo","attribute","sample","Core","defaultEnv","configure","FlaggerBase","gatingInfoListeners","environment","publish","_isDict","environmentPromise","shutdown","handleGatingInfoUpdate","promise","listener","l","identify","constructor","Object","Flagger"],"mappings":"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"}